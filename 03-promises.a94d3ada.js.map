{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAGsB,MAAhBC,EAAOC,SAASC,cAAc,SAC9BC,EAASH,EAAKE,cAAc,yBAiBPF,EAAtBI,iBAAiB,UAAWC,IAC/BA,EAAIC,iBACJ,MAAMC,EAAQC,OAAOR,EAAKS,SAASC,MAAMC,OACnCC,EAAOJ,OAAOR,EAAKS,SAASG,KAAKD,OACjCE,EAASL,OAAOR,EAAKS,SAASI,OAAOF,OAE3CR,EAAOW,UAAW,EAGwB,MAApCC,EAAWC,MAAMC,KAAK,CAAEC,OAAQL,IAAU,CAACM,EAAGC,IAvBP,SAAxBC,EAAUX,GAC/B,OAAO,IAAIY,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEF,E,MAAUX,IAEpBc,EAAO,C,SAAEH,E,MAAUX,GAAQ,GAE5BA,EAAM,G,CAkBFkB,CAHUR,EAAQ,EACJb,EAAQK,EAAOQ,KAM4DE,QAA1FO,WAAWd,EAASe,KAAI,CAACC,EAASX,KACxC,MAAMC,EAAWD,EAAQ,EACzB,OAAOW,EACJC,MAAK,EAACtB,MAAEA,MACNZ,EAAAmC,OAAOC,QAAQ,uBAAqBb,QAAiBX,MAAU,IAEjEyB,OAAM,EAACzB,MAAEA,MACRZ,EAAAmC,OAAOG,QAAQ,sBAAoBf,QAAiBX,MAAU,GAC9D,KAIYyB,OAAVE,IACNC,QAAQD,MAAMA,EAAM,IAGrBE,SAAQ,KACPpC,EAAOW,UAAW,CAAK,GACvB","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпортуємо бібліотеку Notiflix\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Знаходимо форму та кнопку \"submit\"\nconst form = document.querySelector('.form');\nconst button = form.querySelector('button[type=\"submit\"]');\n\n// Функція, яка створює обіцянку з випадковим результатом\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3; \n      if (shouldResolve) {\n        resolve({ position, delay }); \n      } else {\n        reject({ position, delay }); \n      }\n    }, delay);\n  });\n}\n\n// Додаємо обробник події на форму\nform.addEventListener('submit', (evt) => {\n  evt.preventDefault(); \n  const delay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value); \n  const amount = Number(form.elements.amount.value); \n  \n  button.disabled = true; // Блокуємо кнопку \"submit\", після натискання\n\n  // Створюємо масив обіцянок з випадковою затримкою\n  const promises = Array.from({ length: amount }, (_, index) => {\n    const position = index + 1; \n    const promiseDelay = delay + step * index; \n\n    return createPromise(position, promiseDelay); \n  });\n\n   // Виконуємо всі проміси зі створеного масиву промісів і виводимо повідомлення про успішне виконання чи невиконання\n  Promise.allSettled(promises.map((promise, index) => {\n    const position = index + 1;\n    return promise\n      .then(({ delay }) => {\n         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n  }))\n    // Обробляємо помилки.\n  .catch((error) => {\n    console.error(error);\n  })\n    //Активуємо кнопку \n  .finally(() => {\n    button.disabled = false;\n  });\n});\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$button","addEventListener","evt","preventDefault","delay1","Number","elements","delay","value","step","amount","disabled","promises","Array","from","length","_","index","position","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$createPromise","allSettled","map","promise","then","Notify","success","catch","failure","error","console","finally"],"version":3,"file":"03-promises.a94d3ada.js.map"}